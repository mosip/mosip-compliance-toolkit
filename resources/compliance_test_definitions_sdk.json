[
	{
		"testCaseType": "SDK",
		"testName": "Init Test",
		"testId": "SDK2000",
		"specVersion": "0.9.0",
		"testDescription": "Initialise Bio SDK Services",
		"isNegativeTestcase": false,
		"methodName": [
			"init"
		],
		"requestSchema": [
			"InitSDKRequestSchema"
		],
		"responseSchema": [
			"InitSDKResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger",
				"face",
				"iris"
			],
			"sdkPurpose": [
				"Check Quality",
				"Matcher",
				"Extract Template",
				"Convert Format",
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Good face quality",
		"testId": "SDK2001",
		"testDescription": "1. This testcase checks the biomterics for face to be of good quality.<br>2. Add the appropriate probe.xml",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckValidator",
					"description": "Checks the quality score of the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Bad face quality",
		"testId": "SDK2002",
		"testDescription": "Bad face quality",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"BadCheckQualityResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckValidator",
					"description": "Checks the quality score of the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Invalid face data for quality check",
		"testId": "SDK2003",
		"testDescription": "Invalid face data for quality check",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckInvalidDataValidator",
					"description": "Validates the status code for invalid data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "No face data for quality check",
		"testId": "SDK2004",
		"testDescription": "No face data for quality check",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckNoDataValidator",
					"description": "Validates the status code for no data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Bad finger quality",
		"testId": "SDK2005",
		"testDescription": "Bad finger quality",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"BadCheckQualityResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckValidator",
					"description": "Checks the quality score of the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Good finger quality",
		"testId": "SDK2006",
		"testDescription": "Good finger quality",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckValidator",
					"description": "Checks the quality score of the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Invalid finger data for quality check",
		"testId": "SDK2007",
		"testDescription": "Invalid finger data for quality check",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckInvalidDataValidator",
					"description": "Validates the status code for invalid data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "No finger data for quality check",
		"testId": "SDK2008",
		"testDescription": "No finger data for quality check",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckNoDataValidator",
					"description": "Validates the status code for no data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Bad iris quality",
		"testId": "SDK2009",
		"testDescription": "Bad iris quality",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"BadCheckQualityResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckValidator",
					"description": "Checks the quality score of the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Good iris quality",
		"testId": "SDK2010",
		"testDescription": "Good iris quality",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckValidator",
					"description": "Checks the quality score of the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Invalid iris data for quality check",
		"testId": "SDK2011",
		"testDescription": "Invalid iris data for quality check",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckInvalidDataValidator",
					"description": "Validates the status code for invalid data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "No iris data for quality check",
		"testId": "SDK2012",
		"testDescription": "No iris data for quality check",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckNoDataValidator",
					"description": "Validates the status code for no data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Multi modality (Face & Finger) quality check success",
		"testId": "SDK2013",
		"testDescription": "modality quality check success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckValidator",
					"description": "Checks the quality score of the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face",
				"finger"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Multi modality (Face, Finger, Iris) quality check success",
		"testId": "SDK2014",
		"testDescription": "modality quality check success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"check-quality"
		],
		"requestSchema": [
			"CheckQualityRequestSchema"
		],
		"responseSchema": [
			"CheckQualityResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "QualityCheckValidator",
					"description": "Checks the quality score of the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face",
				"finger",
				"iris"
			],
			"sdkPurpose": [
				"Check Quality"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Face match failure",
		"testId": "SDK2015",
		"testDescription": "Face match failure",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Face match success",
		"testId": "SDK2016",
		"testDescription": "Face match success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Invalid face data for match",
		"testId": "SDK2017",
		"testDescription": "Invalid face data for match",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchInvalidDataValidator",
					"description": "Validates the status code for invalid data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "No face data for match",
		"testId": "SDK2018",
		"testDescription": "No face data for match",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchNoDataValidator",
					"description": "Validates the status code for no data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Face match against more than one face",
		"testId": "SDK2019",
		"testDescription": "Face match against more than one face",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchMultiGalleryValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Sending finger data instead of face",
		"testId": "SDK2020",
		"testDescription": "Sending finger data instead of face",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchInvalidDataValidator",
					"description": "Validates the status code for invalid data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Finger match failure",
		"testId": "SDK2021",
		"testDescription": "Finger match failure",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Finger match success",
		"testId": "SDK2022",
		"testDescription": "Finger match success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Invalid finger data for match",
		"testId": "SDK2023",
		"testDescription": "Invalid finger data for match",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchInvalidDataValidator",
					"description": "Validates the status code for invalid data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "No finger data for match",
		"testId": "SDK2024",
		"testDescription": "No finger data for match",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchNoDataValidator",
					"description": "Validates the status code for no data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Finger match against more than 10 fingers",
		"testId": "SDK2025",
		"testDescription": "Finger match against more than 10 fingers",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchMultiGalleryValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Finger match fail when wrong subtype",
		"testId": "SDK2026",
		"testDescription": "Finger match fail when wrong subtype",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Sending face data instead of finger",
		"testId": "SDK2027",
		"testDescription": "Sending face data instead of finger",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchInvalidDataValidator",
					"description": "Validates the status code for invalid data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris match failure",
		"testId": "SDK2028",
		"testDescription": "Iris match failure",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris match success",
		"testId": "SDK2029",
		"testDescription": "Iris match success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Invalid iris data for match",
		"testId": "SDK2030",
		"testDescription": "Invalid iris data for match",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchInvalidDataValidator",
					"description": "Validates the status code for invalid data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "No iris data for match",
		"testId": "SDK2031",
		"testDescription": "No iris data for match",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchNoDataValidator",
					"description": "Validates the status code for no data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris match against more than 2 iris",
		"testId": "SDK2032",
		"testDescription": "Iris match against more than 2 iris",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchMultiGalleryValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris match fail when wrong subtype",
		"testId": "SDK2033",
		"testDescription": "Iris match fail when wrong subtype",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Sending face data instead of iris",
		"testId": "SDK2034",
		"testDescription": "Sending face data instead of iris",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchInvalidDataValidator",
					"description": "Validates the status code for invalid data"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Multi modality (Face, Finger) match success",
		"testId": "SDK2035",
		"testDescription": "Multi modality (Face,Finger) match success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face",
				"finger"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Multi Modality (Face, Finger, Iris) match success",
		"testId": "SDK2036",
		"testDescription": "Multi Modality match success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face",
				"finger",
				"iris"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Multi modality (Face, Finger, Iris) match success - multi gallery",
		"testId": "SDK2037",
		"testDescription": "Multi modality match success - multi gallery",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"match"
		],
		"requestSchema": [
			"MatchRequestSchema"
		],
		"responseSchema": [
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchMultiGalleryValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face",
				"finger",
				"iris"
			],
			"sdkPurpose": [
				"Matcher"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Finger Extract Template Success",
		"testId": "SDK2038",
		"testDescription": "Finger extract template is successful or not",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Face Extract Template Success",
		"testId": "SDK2039",
		"testDescription": "Face extract template is successful or not",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris Extract Template Success",
		"testId": "SDK2040",
		"testDescription": "Iris extract template is successful or not",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Finger Extract Template Fail",
		"testId": "SDK2041",
		"testDescription": "Finger extract template is failure or not",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Face Extract Template Fail",
		"testId": "SDK2042",
		"testDescription": "Face extract template is failure or not",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris Extract Template Fail",
		"testId": "SDK2043",
		"testDescription": "Iris extract template is failure or not",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},	
	{
		"testCaseType": "SDK",
		"testName": "Finger extract invalid data failure",
		"testId": "SDK2044",
		"testDescription": "Finger extract invalid data failure",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateInvalidDataValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Face extract invalid data failure",
		"testId": "SDK2045",
		"testDescription": "Face extract invalid data failure",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateInvalidDataValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris extract invalid data failure",
		"testId": "SDK2046",
		"testDescription": "Iris extract invalid data failure",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateInvalidDataValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Finger extract no input failure",
		"testId": "SDK2047",
		"testDescription": "Finger extract no input failure",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateNoInputDataValidator",
					"description": "Validates if no input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Face extract no input failure",
		"testId": "SDK2048",
		"testDescription": "Face extract no input failure",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateNoInputDataValidator",
					"description": "Validates if no input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris extract no input failure",
		"testId": "SDK2049",
		"testDescription": "Iris extract no input failure",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateNoInputDataValidator",
					"description": "Validates if no input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Finger Extract Template And Match FMR Success",
		"testId": "SDK2050",
		"testDescription": "Finger Extract And Match FMR Success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template",
			"match"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema",
			"MatchRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema",
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Face Extract Template And Match FMR Success",
		"testId": "SDK2051",
		"testDescription": "Face Extract And Match FMR Success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template",
			"match"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema",
			"MatchRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema",
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris Extract Template And Match FMR Success",
		"testId": "SDK2052",
		"testDescription": "Iris Extract And Match FMR Success",
		"specVersion": "0.9.0",
		"isNegativeTestcase": false,
		"methodName": [
			"extract-template",
			"match"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema",
			"MatchRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema",
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Finger Extract Template And Match FMR Fail",
		"testId": "SDK2053",
		"testDescription": "Finger Extract And Match FMR Fail",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"extract-template",
			"match"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema",
			"MatchRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema",
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Face Extract Template And Match FMR Fail",
		"testId": "SDK2054",
		"testDescription": "Face Extract And Match FMR Fail",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"extract-template",
			"match"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema",
			"MatchRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema",
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testName": "Iris Extract Template And Match FMR Fail",
		"testId": "SDK2055",
		"testDescription": "Iris Extract And Match FMR Fail",
		"specVersion": "0.9.0",
		"isNegativeTestcase": true,
		"methodName": [
			"extract-template",
			"match"
		],
		"requestSchema": [
			"ExtractTemplateRequestSchema",
			"MatchRequestSchema"
		],
		"responseSchema": [
			"ExtractTemplateResponseSchema",
			"MatchResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ExtractTemplateValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			],
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "MatchValidator",
					"description": "Validates if biomterics match for the modality"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Extract Template"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2056",
		"specVersion": "0.9.0",
		"testName": "Finger segment good quality",
		"testDescription": "Finger segment good quality",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"segment"
		],
		"requestSchema": [
			"SegmentRequestSchema"
		],
		"responseSchema": [
			"SegmentResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "SegmentValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2057",
		"specVersion": "0.9.0",
		"testName": "Face segment good quality",
		"testDescription": "Face segment good quality",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"segment"
		],
		"requestSchema": [
			"SegmentRequestSchema"
		],
		"responseSchema": [
			"SegmentResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "SegmentValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2058",
		"specVersion": "0.9.0",
		"testName": "Iris segment good quality",
		"testDescription": "Iris segment good quality",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"segment"
		],
		"requestSchema": [
			"SegmentRequestSchema"
		],
		"responseSchema": [
			"SegmentResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "SegmentValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2059",
		"specVersion": "0.9.0",
		"testName": "Finger segment invalid data failure",
		"testDescription": "Finger segment invalid data failure",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"segment"
		],
		"requestSchema": [
			"SegmentRequestSchema"
		],
		"responseSchema": [
			"SegmentResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "SegmentInvalidDataValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2060",
		"specVersion": "0.9.0",
		"testName": "Face segment invalid data failure",
		"testDescription": "Face segment invalid data failure",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"segment"
		],
		"requestSchema": [
			"SegmentRequestSchema"
		],
		"responseSchema": [
			"SegmentResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "SegmentInvalidDataValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2061",
		"specVersion": "0.9.0",
		"testName": "Iris segment invalid data failure",
		"testDescription": "Iris segment invalid data failure",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"segment"
		],
		"requestSchema": [
			"SegmentRequestSchema"
		],
		"responseSchema": [
			"SegmentResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "SegmentInvalidDataValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2062",
		"specVersion": "0.9.0",
		"testName": "Finger segment no input failure",
		"testDescription": "Finger segment no input failure",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"segment"
		],
		"requestSchema": [
			"SegmentRequestSchema"
		],
		"responseSchema": [
			"SegmentResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "SegmentNoInputDataValidator",
					"description": "Validates if no input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2063",
		"specVersion": "0.9.0",
		"testName": "Face segment no input failure",
		"testDescription": "Face segment no input failure",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"segment"
		],
		"requestSchema": [
			"SegmentRequestSchema"
		],
		"responseSchema": [
			"SegmentResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "SegmentNoInputDataValidator",
					"description": "Validates if no input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2064",
		"specVersion": "0.9.0",
		"testName": "Iris segment no input failure",
		"testDescription": "Iris segment no input failure",
		"isNegativeTestcase": false,
		"inactive": true,
		"methodName": [
			"segment"
		],
		"requestSchema": [
			"SegmentRequestSchema"
		],
		"responseSchema": [
			"SegmentResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "SegmentNoInputDataValidator",
					"description": "Validates if no input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Segment"
			]
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2065",
		"specVersion": "0.9.0",
		"testName": "Face convert from ISO19794_5_2011 to IMAGE/JPEG",
		"testDescription": "Face convert from ISO19794_5_2011 to IMAGE/JPEG",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertDataValidator",
					"description": "Validates the input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_5_2011",
			"convertTargetFormat": "IMAGE/JPEG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2066",
		"specVersion": "0.9.0",
		"testName": "Face convert from ISO19794_5_2011 to IMAGE/PNG",
		"testDescription": "Face convert from ISO19794_5_2011 to IMAGE/PNG",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertDataValidator",
					"description": "Validates the input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_5_2011",
			"convertTargetFormat": "IMAGE/PNG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2067",
		"specVersion": "0.9.0",
		"testName": "Face convert invalid data failure",
		"testDescription": "Face convert invalid data failure",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertInvalidDataValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_5_2011",
			"convertTargetFormat": "IMAGE/JPEG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2068",
		"specVersion": "0.9.0",
		"testName": "Face convert no input failure",
		"testDescription": "Face convert no input failure",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertNoInputDataValidator",
					"description": "Validates if no input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"face"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_5_2011",
			"convertTargetFormat": "IMAGE/JPEG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2069",
		"specVersion": "0.9.0",
		"testName": "Finger convert from ISO19794_4_2011 to IMAGE/JPEG",
		"testDescription": "Finger convert from ISO19794_4_2011 to IMAGE/JPEG",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertDataValidator",
					"description": "Validates the input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_4_2011",
			"convertTargetFormat": "IMAGE/JPEG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2070",
		"specVersion": "0.9.0",
		"testName": "Finger convert from ISO19794_4_2011 to IMAGE/PNG",
		"testDescription": "Finger convert from ISO19794_4_2011 to IMAGE/PNG",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertDataValidator",
					"description": "Validates the input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_4_2011",
			"convertTargetFormat": "IMAGE/PNG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2071",
		"specVersion": "0.9.0",
		"testName": "Finger convert invalid data failure",
		"testDescription": "Finger convert invalid data failure",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertInvalidDataValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_4_2011",
			"convertTargetFormat": "IMAGE/JPEG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2072",
		"specVersion": "0.9.0",
		"testName": "Finger convert no input failure",
		"testDescription": "Finger convert no input failure",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertNoInputDataValidator",
					"description": "Validates if no input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"finger"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_4_2011",
			"convertTargetFormat": "IMAGE/JPEG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2073",
		"specVersion": "0.9.0",
		"testName": "Iris convert from ISO19794_6_2011 to IMAGE/PNG",
		"testDescription": "Iris convert from ISO19794_6_2011 to IMAGE/PNG",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertDataValidator",
					"description": "Validates the input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_6_2011",
			"convertTargetFormat": "IMAGE/PNG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2074",
		"specVersion": "0.9.0",
		"testName": "Iris convert invalid data failure",
		"testDescription": "Iris convert invalid data failure",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertInvalidDataValidator",
					"description": "Validates if input BDB data present in the Probe for the modality is valid"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_6_2011",
			"convertTargetFormat": "IMAGE/PNG"
		}
	},
	{
		"testCaseType": "SDK",
		"testId": "SDK2075",
		"specVersion": "0.9.0",
		"testName": "Iris convert no input failure",
		"testDescription": "Iris convert no input failure",
		"isNegativeTestcase": false,
		"methodName": [
			"convert-format"
		],
		"requestSchema": [
			"ConvertRequestSchema"
		],
		"responseSchema": [
			"ConvertNullResponseSchema"
		],
		"validatorDefs": [
			[
				{
					"name": "SchemaValidator",
					"description": "Validates if response has all mandatory attributes and they have allowed values"
				},
				{
					"name": "ConvertNoInputDataValidator",
					"description": "Validates if no input BDB data present in the Probe"
				}
			]
		],
		"otherAttributes": {
			"modalities": [
				"iris"
			],
			"sdkPurpose": [
				"Convert Format"
			],
			"convertSourceFormat": "ISO19794_6_2011",
			"convertTargetFormat": "IMAGE/PNG"
		}
	}
]